<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <system.web>
    <compilation debug="true" targetFramework="4.5" />
    <authentication mode="Windows" />
    <identity impersonate="true" />
    <pages styleSheetTheme="Default" />
    <trace enabled="true" writeToDiagnosticsTrace="true" />
  </system.web>
  <system.net>
    <mailSettings>
      <smtp deliveryMethod="Network" from="your@email.com">
        <network host="your.mail.server.com" port="25" defaultCredentials="true" />
      </smtp>
    </mailSettings>
  </system.net>
  <location path="Diagnostics.aspx" allowOverride="false">
    <system.web>
      <authorization>
        <allow roles="BUILTIN\Administrators" />
        <deny users="?" />
        <deny users="*" />
      </authorization>
    </system.web>
  </location>
  <location path="Trace.axd" allowOverride="false">
    <system.web>
      <authorization>
        <allow roles="BUILTIN\Administrators" />
        <deny users="?" />
        <deny users="*" />
      </authorization>
    </system.web>
  </location>
  <system.webServer>
    <modules>
      <add name="AppTraceManager" type="Erwine.Leonard.T.LoggingModule.CustomTraceManagerModule"/>
    </modules>
  </system.webServer>
  <system.diagnostics>
    <!--
		  "sharedListeners" defines "event listeners" which record events generated by "event sources" within the web application
		  Each shared listener is identified by a unique name which can be referenced in the "sources" section
		  Common attributes:
			  name: A unique name for which the individual listener can be identified by.
			  type: Identifies the type of listener.
			  traceOutputOptions: Controls what information gets recorded with the event.
				  This attribute is optional, and if omitted, the default value of "None" is used.
				  Multiple values are separated by columns, and are as follows:
					  Callstack: Write the call stack.
					  DateTime: Write the date and time.
					  LogicalOperationStack: Writes the logical operation stack as defined by the application.
					  ProcessId: Write the process identity.
					  ThreadId: Write the thread identity.
					  Timestamp: Writes the timestamp value.
					  None: Do not include any additional information
			  initializeData: Parameters to pass to the shared listener. The expected value is specific to the particular type.
	  -->
    <sharedListeners>
      <add name="consoleListener" type="System.Diagnostics.ConsoleTraceListener" traceOutputOptions="ProcessId, DateTime" />
      <!--
		    System.Diagnostics.DelimitedListTraceListener: Writes events to a delimited text log file.
		    initializeData: Location of the text log file to be generated.
		    delimiter: delimiter which is used to separate individual columns.
		
		    Note - This trace listener is not thread-safe, and can cause performance issues during high traffic periods.
			    This should only be used when thread-safe listeners cannot be used, or is not appropriate.
	    <add name="delimitedText" type="System.Diagnostics.DelimitedListTraceListener" delimiter="," initializeData="delimitedOutput.csv"
		    traceOutputOptions="ProcessId, DateTime" />
	    -->
      <!--
		    System.Diagnostics.XmlWriterTraceListener: Writes events to an XML log file.
		    initializeData: Location of the XML log file to be generated.
		
		    Note - This trace listener is not thread-safe, and can cause performance issues during high traffic periods.
			    This should only be used when thread-safe listeners cannot be used, or is not appropriate.
	    -->
      <!--<add name="xml" type="System.Diagnostics.XmlWriterTraceListener" initializeData="C:\Users\Leonard\Documents\visual studio 2013\Projects\WebDevHelper\WebDevHelper.Web\Log\Traces.svclog" />-->
      <!--
		    System.Diagnostics.EventLogTraceListener: Writes events to the windows event log.
		    initializeData: The name of an existing event log source.
		    eventLog: Optional attribute which can be used to specify the name of the event log to use.
			    If this attribute is omitted, then events will be written to the "Application" log.
	    <add name="eventLog" type="System.Diagnostics.EventLogTraceListener" initializeData="TraceListenerLog" />
	    -->
      <!--
		    System.Web.IisTraceListener: Writes events to to the IIS 7.0 infrastructure.
		    This type does not use the "initializeData" attribute.
	    <add name="iis" type="System.Web.IisTraceListener" />
	    -->
      <!--
		    System.Web.WebPageTraceListener: Writes event information directly to ASP.NET Web page outputs. 
		    This type does not use the "initializeData" attribute.
		
		    Note - This includes debug and trace information along with the web page, and should not be used in production unless
			    absolutely necessary.
	    <add name="webPage" type="System.Web.WebPageTraceListener" initializeData="TraceListenerLog" />
	    -->
    </sharedListeners>
    <!--
	    "sources" defines the sources which can potentially emit events.
	    Attributes:
		    name: A unique name for which the individual event source can be identified by.
		    switchValue: Types of events which are to be logged. Multiple values are separated by commas. Possible values are:
			    Off: Do not emit any events.
			    Critical: Unexpected error which indicates a failure of the whole web application.
			    Error: Unexpected error which does not cause the whole web application to fail.
			    Warning: Errors which indicate a possible problem or other event which warrants a warning to the system administrators.
			    Information: Events which indicate system status and milestones during normal application operation.
			    Verbose: Low-level events which can be used for debugging and optimization.
			    ActivityTracing: Flow events between processing activities and components which can be used to correlate activites across
				    applications in the same application domain.
	    "listeners/add" elements: Defines "listeners" to which the source's events are emitted.
		    An event source can have multiple "add" elements. Each 'add' element has a 'name' parameter.
		    The "name" parameter is the name of an event listener defined in the "sharedListeners" element.
    -->
    <sources>
      <!-- Events generated directly by the host website -->
      <source name="Erwine.Leonard.T.ExampleWebApplication" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!--
		    Events originating from all stages of WCF processing, whenever configuration is read, a message is processed in transport,
			    security processing, a message is dispatched in user code, and so on.
		    propagateActivity: Indicates whether the activity should be propagated to other endpoints that participate in the message exchange.
	    -->
      <source name="System.ServiceModel" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing" propagateActivity="true">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!--
		    Events originating from all stages of WCF processing, whenever configuration is read, a message is processed in transport,
			    security processing, a message is dispatched in user code, and so on.
		    propagateActivity: Indicates whether the activity should be propagated to other endpoints that participate in the message exchange.
	    -->
      <source name="System.ServiceModel.Activation" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Logs all messages that flow through the WCF system. -->
      <source name="System.ServiceModel.MessageLogging" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Events originating from CardSpace -->
      <source name="CardSpace" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Events originating from the .NET Framework interface to the Common Log File System (CLFS) -->
      <source name="System.IO.Log" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Logs when objects are read or written -->
      <source name="System.Runtime.Serialization" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Events originating from .NET Framework network operations, including sending emails. -->
      <source name="System.Net" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Lower-level events originating from .NET Framework network operations. -->
      <source name="System.Net.Sockets" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
      <!-- Events originating from Windows Identity Foundation -->
      <source name="System.IdentityModel" switchValue="Critical, Warning, Error, Information, Verbose, ActivityTracing">
        <listeners>
          <add name="consoleListener" />
          <remove name="Default" />
        </listeners>
      </source>
    </sources>
    <trace autoflush="false" indentsize="4">
      <listeners>
        <add name="consoleListener" />
        <remove name="Default" />
      </listeners>
    </trace>
  </system.diagnostics>
  <system.codedom>
    <compilers>
      <compiler compilerOptions="/d:TRACE;DEBUG" extension=".cs" language="c#;cs;csharp" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
    </compilers>
  </system.codedom>
  <connectionStrings>
    <add name="PhotoLockerEntities" connectionString="metadata=res://*/BusinessObjects.Db.PhotoModel.csdl|res://*/BusinessObjects.Db.PhotoModel.ssdl|res://*/BusinessObjects.Db.PhotoModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=LENNYPC\SQLEXPRESS;initial catalog=PhotoLocker;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
  </connectionStrings>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>